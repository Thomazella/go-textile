{"version":3,"sources":["LaunchLogo@3x.png","../external \"ed25519\"","ConnectedComponent.tsx","Main.tsx","Splash.tsx","App.tsx","serviceWorker.ts","Store.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","ed25519","e","Error","code","ConnectedComponent","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","get","props","Component","connect","inject","Main","observer","store","stores","react_default","a","createElement","profile","address","Splash","Pulse_default","forever","Image","style","margin","centered","size","src","Logo","App","setTimeout","checkStatus","view","screen","status","src_Splash","src_Main","Dimmer","inverted","active","Loader","className","build","Boolean","window","location","hostname","match","textile","Textile","url","port","Store_class","AppStore","_this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","observe","change","newValue","then","username","slice","catch","err","console","log","value","_this2","utils","online","toast","title","description","time","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","root","index_module","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db5fe192.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LaunchLogo@3x.2ce49d6a.png\";","if(typeof ed25519 === 'undefined') {var e = new Error(\"Cannot find module 'ed25519'\"); e.code = 'MODULE_NOT_FOUND'; throw e;}\nmodule.exports = ed25519;","import { Component } from \"react\"\nimport { inject } from \"mobx-react\"\nimport { Stores } from \"./Store\"\n\nexport class ConnectedComponent<T, S, X = {}> extends Component<T, X> {\n  public get stores() {\n    return (this.props as any) as S\n  }\n}\n\nexport const connect = (...args: Array<keyof Stores>) => inject(...args)\n","import React from 'react'\nimport { ConnectedComponent, connect } from './ConnectedComponent'\nimport { observer } from \"mobx-react\"\nimport { Stores } from './Store'\n\n@connect('store') @observer\nclass Main extends ConnectedComponent<{}, Stores> {\n  render() {\n    const { store } = this.stores\n    return (\n      <div>\n        <p>{store.profile.address}</p>\n      </div>\n    )\n  }\n}\n\nexport default Main\n","import React, { Component } from 'react'\nimport { Image } from 'semantic-ui-react'\nimport Logo from './LaunchLogo@3x.png'\nimport Pulse from 'react-reveal/Pulse'\n\nclass Splash extends Component {\n  render() {\n    return (\n      <Pulse forever>\n        <Image style={{ margin: 'auto' }} centered size='medium' src={Logo} />\n      </Pulse>\n    )\n  }\n}\n\nexport default Splash\n","import React, { Component } from 'react'\nimport { observer } from 'mobx-react'\nimport 'react-semantic-toasts/styles/react-semantic-alert.css'\nimport Main from './Main'\nimport Splash from './Splash'\nimport { Dimmer, Loader } from 'semantic-ui-react'\nimport { SemanticToastContainer } from 'react-semantic-toasts'\nimport { Stores } from './Store'\nimport { ConnectedComponent, connect } from './ConnectedComponent'\n\ninterface AppProps { }\n\n@connect('store') @observer\nclass App extends ConnectedComponent<AppProps, Stores> {\n  componentDidMount() {\n    const { store } = this.stores\n     setTimeout(() => { store.checkStatus() }, 3000)\n  }\n  render() {\n    const { store } = this.stores\n    const view = ((screen: string) => {\n      switch (screen) {\n        case 'loading':\n          return (\n            <Splash />\n          )\n        case 'online':\n          return (\n            <Main />\n          )\n        default:\n          return (\n            <Dimmer inverted active>\n              <Loader size='massive' />\n            </Dimmer>\n          )\n      }\n    })(store.status)\n    return (\n      <div className='App'>\n        {view}\n        <SemanticToastContainer />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observe, action, observable } from 'mobx'\nimport { Textile } from '@textileio/js-http-client'\nimport { toast } from 'react-semantic-toasts'\n\nconst textile = new Textile({\n  url: 'http://127.0.0.1',\n  port: 40602\n})\n\nexport interface Store {}\n\nexport class AppStore implements Store {\n  constructor() {\n    observe(this, 'status', change => {\n      if (change.newValue === 'online') {\n        textile.profile.get().then((profile: any) => {\n          if (!profile.username) {\n            profile.username = profile.address.slice(-8)\n          }\n          this.profile = profile\n        }).catch((err: Error) => {\n          console.log(err)\n        })\n      }\n    })\n  }\n  @observable gateway: string = 'http://127.0.0.1:5052'\n  @observable status: string = 'loading'\n  // TODO: Get proper types from js-http-client when Typescript lands\n  @observable profile: any = {}\n  @action checkStatus() {\n    textile.utils.online().then((online: boolean) => {\n      if (online) {\n        this.status = 'online'\n      } else {\n        this.status = 'offline'\n      }\n    }).catch(() => {\n      toast({\n        title: 'Offline?',\n        description: 'Looks like your Textile peer is offline 😔',\n        time: 0\n      })\n    })\n  }\n}\n\nexport interface Stores {\n  store: AppStore\n}\n\nexport const stores: Stores = {\n  store: new AppStore()\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'mobx-react'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'semantic-ui-css/semantic.min.css'\nimport { stores } from './Store'\n\nconst root = (\n  <Provider {...stores}>\n      <App />\n  </Provider>\n);\n\nReactDOM.render(root, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}